import React, { Component } from "react";
import { compose } from "recompose";
// Components
import { withFirebase } from "../Firebase";
import {
  AuthUserContext,
  withAuthorization,
  withEmailVerification,
} from "../Session";

const HomePage = () => (
  <>
    <div>Home</div>
    <p>The Home Page is accessible by every signed in user.</p>

    <Message />
  </>
);

class MessagesBase extends Component {
  constructor() {
    super();

    this.state = {
      text: "",
      messages: [],
      loading: false,
    };
  }

  onChangeText = (event) => {
    this.setState({ text: event.target.value });
  };

  onCreateMessage = (event, authUser) => {
    event.preventDefault();

    // Create a new message reference with an auto-generated id:
    this.props.firebase.messages().push({
      text: this.state.text,
      userId: authUser.uid,
      createdAt: this.props.firebase.serverValue.TIMESTAMP,
    });

    // Use the push() method to append data to a list in multiuser applications.
    // The push() method generates a unique key every time a new child is added to the specified Firebase reference.
    // By using these auto-generated keys for each new element in the list, several clients can add children to
    // the same location at the same time without write conflicts. The unique key generated by push() is based on a timestamp,
    // so list items are automatically ordered chronologically

    this.setState({ text: "" });
  };

  onRemoveMessage = (uid) => {
    this.props.firebase.message(uid).remove();
  };

  onEditMessage = (message, text) => {
    // Using the spread operator, all other properties of the message entity are kept as before
    // If we set only the new text for the message, all other properties (e.g. userId) would be lost.
    const { uid, ...messageSnapshot } = message;

    this.props.firebase.message(uid).set({
      ...messageSnapshot,
      text,
      editedAt: this.props.firebase.serverValue.TIMESTAMP,
    });
  };

  componentDidMount() {
    this.setState({ loading: true });

    this.props.firebase.messages().on("value", (snapshot) => {
      const messageObject = snapshot.val();

      // We need to know if the list of messages is empty (see constructor), if the message API
      // didnâ€™t return any messages and the local state is changed from an empty array to null
      if (messageObject) {
        const messageList = Object.keys(messageObject).map((item) => ({
          ...messageObject[item],
          uid: item,
        }));

        this.setState({ messages: messageList, loading: false });
      } else {
        this.setState({ messages: null, loading: false });
      }
    });
  }

  componentWillUnmount() {
    this.props.firebase.messages().off();
  }

  render() {
    const { text, messages, loading } = this.state;

    return (
      <AuthUserContext.Consumer>
        {(authUser) => (
          <>
            {loading && <div>Loading ...</div>}

            {messages ? (
              <MessageList
                messages={messages}
                onRemoveMessage={this.onRemoveMessage}
                onEditMessage={this.onEditMessage}
              />
            ) : (
              <p>There are no messages ...</p>
            )}

            <form onSubmit={(event) => this.onCreateMessage(event, authUser)}>
              <input type="text" value={text} onChange={this.onChangeText} />
              <button type="submit">Send</button>
            </form>
          </>
        )}
      </AuthUserContext.Consumer>
    );
  }
}

const MessageList = ({ messages, onRemoveMessage, onEditMessage }) => (
  <ul>
    {messages.map((item) => (
      <MessageItem
        key={item.uid}
        message={item}
        onRemoveMessage={onRemoveMessage}
        onEditMessage={onEditMessage}
      />
    ))}
  </ul>
);

class MessageItem extends Component {
  constructor(props) {
    super(props);
    this.state = {
      editMode: false,
      editText: this.props.message.text,
    };
  }

  onToggleEditMode = () => {
    this.setState((state) => ({
      editMode: !state.editMode,
      editText: this.props.message.text,
    }));
  };

  onChangeEditText = (event) => {
    this.setState({ editText: event.target.value });
  };

  onSaveEditText = () => {
    this.props.onEditMessage(this.props.message, this.state.editText);

    this.setState({ editMode: false });
  };

  render() {
    const { message, onRemoveMessage } = this.props;
    const { editMode, editText } = this.state;

    return (
      <li>
        {editMode ? (
          <input
            type="text"
            value={editText}
            onChange={this.onChangeEditText}
          />
        ) : (
          <span>
            <strong>{message.userId}</strong> {message.text}
            {message.editedAt && <span>(Edited)</span>}
          </span>
        )}
        {editMode ? (
          <span>
            <button type="button" onClick={this.onSaveEditText}>
              Save
            </button>
            <button type="button" onClick={this.onToggleEditMode}>
              Reset
            </button>
          </span>
        ) : (
          <button type="button" onClick={this.onToggleEditMode}>
            Edit
          </button>
        )}

        {!editMode && (
          <button type="button" onClick={() => onRemoveMessage(message.uid)}>
            Delete
          </button>
        )}
      </li>
    );
  }
}

const Message = withFirebase(MessagesBase);

// Broad-grained authorization
const condition = (authUser) => !!authUser;

export default compose(
  withEmailVerification,
  withAuthorization(condition)
)(HomePage);
